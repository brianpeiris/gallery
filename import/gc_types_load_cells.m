% 1 melanopsin: very large sparse
struct('class','GC','name','1w (M1-Brn3b+, pupillary reflex)','cells',[20203 20029]);
% 2 melanopsin m2? 
struct('class','GC','name','1n (M1-Brn3b-, photoentrainment)','cells',[20157 20164 17110 17182 17050 17021 10007 20132 20092 17236 26019 26024]);
% 3 large sparse
struct('class','GC','name','13 (sOFFalpha)','cells',[10018 17109]);
% cutoff: 17051
% 4 midi-J
struct('class','GC','name','2aw (midi-J)','cells',[17075 17060 17028 20103 20201 17205 17107 20047 17144 17061 17200 26018]);
% cutoff: 17238
% 5 mini-j. outlier 17130. cutoff 10015
struct('class','GC','name','2an (mini-J)','cells',[17177 20066 20060 17027 15018 17105 15066 10017 10010 17062 50001 20264 20168 20147 17130 20101 20024]);
% 6
struct('class','GC','name','2 (?)','cells',[17216 10005 10013 50004 20082 17013 17092 20051 20234 26062]);
% 7 minor layer at L5
struct('class','GC','name','25 (?)','cells',[20105 20104 20186 20237 20067 25006 17176 17132 20045 20036 26031]);
% 8
struct('class','GC','name','3o (?)','cells',[17135 20121 17024 17076 17037 17192 26003 26038]);
% 9
struct('class','GC','name','3i (mini-sOFFalpha)','cells',[20107 17077 26063]);
% 10 CB2
struct('class','GC','name','4on (mini-tOFFalpha, CB2)','cells',[20230 17064 17034 17167 17151 20041 26021]);
% 11 W7a
struct('class','GC','name','4ow (tOFFalpha, W7a)','cells',[17188 17079 20156 26004]);
% 12
struct('class','GC','name','4i (?)','cells',[25004 17022 20170 17247 20174 17057 26006 26008 26050]);
% 13
struct('class','GC','name','5tow (?)','cells',[20128 20165 20240]);
% 14 w3 
struct('class','GC','name','5ton (LED, w3?)','cells',[17090 17181 17138 17011 50002 20114 20102 20216 20191 20184 20226 20262 17093 17121 17159 20089 17190 17078 17059 20127 20055]);
% 15
struct('class','GC','name','5ti (?)','cells',[17040 20135 20183 17071 20070 17055 26044]);
% 16
struct('class','GC','name','5s (?)','cells',[17160 17146 20223 17081 17127 17168 20053 20012]);
% 17 w3 similar regular
struct('class','GC','name','51 (LED, w3?)','cells',[20097 20120 20212 20182 17098 17095 20153 20258 17035 20037]);
% 18 bump
struct('class','GC','name','68 (?)','cells',[20255 20113 20232 20046]);
% 19
struct('class','GC','name','6w (tOnalpha)','cells',[20222 20217 17083 20068 26020]);
% 20
struct('class','GC','name','6n (mini tONalpha)','cells',[20198 20073 17082 26035 26043]);
% 21 very wide: m4? 
struct('class','GC','name','8wi (M2)','cells',[20228]);
% 22 on alpha sustained
struct('class','GC','name','8wo (sONalpha, M4)','cells',[17111 26001]);
% 23 wide
struct('class','GC','name','8n (?)','cells',[20126]);
% 24 
struct('class','GC','name','9 (?)','cells',[20112 20076 20056 20006]);
% wide field 
% 25 ooDSGC. outliers: 20239 (with interlayer stuff) / 20210 (too few on stuff)
struct('class','GC','name','37 (On-Off DS)','cells',[90002 90001 25005 20254 20245 20239 20233 20220 20213 20210 20179 20137 20125 20096 17161 17080 20016 20014 20002]);

struct('class','GC','name','7o (tOn DS)','cells',[17053 20180 20075 26034]);
% 27 onDSGC. 
struct('class','GC','name','7i (sON DS)','cells',[17152 20021 26002 26070]);
% 28 irregular bilayer
struct('class','GC','name','63 (?)','cells',[20181 17140 20208 20178 17097 17114 17084 20140 20129 30003 20071 30002 20019 20011 20005 26057]);
% 29 regular bilayer, layers further
struct('class','GC','name','72w (?)','cells',[20166 20221 17069 20074]);
% 30 irregular bilayer, layers closer
struct('class','GC','name','72n (?)','cells',[20100 20187 20150 20043 26059]);
% 31 more at off layer
struct('class','GC','name','27 (?)','cells',[20117 17212 26051 26065]);
% 32 trimodal
struct('class','GC','name','85 (?)','cells',[20063 20072 20200 17012 17038 26061]);
% 33 regular bilayer even wider
struct('class','GC','name','81 (?)','cells',[20158]);
% 34 irregular bilayer 
struct('class','GC','name','83 (?)','cells',[17009 20197]);
% 35 regular bilayer 
struct('class','GC','name','82w (?)','cells',[20118]);
% 36 regular bilayer regular on-dsgc style
struct('class','GC','name','82i (?)','cells',[20251 30001 20161 26058 26067]);
% 37 irregular bilayer on-dsgc style
struct('class','GC','name','82o (?)','cells',[20069 20080 26052]);
% 38 irregular bilayer more at off layer
struct('class','GC','name','28 (?)','cells',[20243 20155 20163 20257 26005 20167 26033]);
% 39 regular bilayer
struct('class','GC','name','91n (?)','cells',[20218 25003 20042]);
% 40 regular bilayer irregular on-dsgc style
struct('class','GC','name','91w (?)','cells',[20081 20020]);
% 41 weirdo
struct('class','GC','name','weirdos','cells',[17134 20248]);
];

function bc=bc_types_load_cells()

bc=[

% 1 
struct('class','BC','name','bc1 (NK3R+ & Syt2-)','cells',[60008 60019 60026 60027 60032 60052 60055 60078 60079 60099 60105 60109 60110 60111 60114 60118 60129 60132 60139 60142 60147 60150 60158 60161 60162 60164 60170 60177 60184 60187 60188 60189 60194 60195 60196 60203 60204 60212 60213 60216 60218]);
% 2 
struct('class','BC','name','bc2 (NK3R+ & Syt2+,recoverin,Neto1,Cdh8)','cells',[60080 60001 60002 60003 60004 60006 60009 60010 60011 60012 60013 60021 60022 60023 60025 60029 60037 60038 60039 60040 60041 60042 60043 60044 60046 60097 60101 60102 60103 60104 60112 60120 60124 60130 60133 60135 60138 60140 60141 60149 60157 60159 60167 60169 60182 60208 60209 60210 60214 60217 60219 60221 60223 60224 60226]);
% 3 
struct('class','BC','name','bc3a (HCN4)','cells',[60028 60030 60048 60049 60050 60056 60059 60066 60068 60072 60075 60076 60085 60088 60092 60093 60108 60115 60123 60134 60136 60137 60145 60146 60166 60172 60176 60181]);
% 4 
struct('class','BC','name','bc3b (PKARIIbeta)','cells',[60024 60045 60053 60057 60063 60069 60073 60074 60077 60082 60084 60087 60090 60094 60096 60098 60106 60107 60122 60131 60148 60151 60153 60154 60156 60165 60173 60178 60179 60190 60201 60211 60215 60228]);
% 5 
struct('class','BC','name','bc4 (Csen)','cells',[60047 60058 60067 60083 60086 60089 60091 60095 60100 60116 60117 60119 60121 60125 60127 60143 60144 60160 60163 60168 60171 60174 60175 60183 60185 60186 60191 60197 60199 60202 60206 60220 60222]);
% 6 
struct('class','BC','name','bc5t (?)','cells',[60543 60452 60366 60371 60387 60395 60399 60403  60408 60411 60436 60445 60448 60465 60469 60481 60502 60503 60507 60527  60533 60535 60538 60054 60155]);
% 7 
struct('class','BC','name','bc5o (5-HT3R-EGFP,Kcng4,Cdh9)','cells',[60364 60390 60405 60406 60420 60432 60434 60440  60447 60453 60459 60466 60473 60484 60490 60495 60513 60534 60540 60556  60559 60608 60612 60018 60061 60064 60071 60532]);
% 8 
struct('class','BC','name','bc5i (5-HT3R-EGFP,Kcng4,Cdh9)','cells',[60360 60033 60374 60380 60383 60386 60388 60389 60404 60410 60414 60415 60421 60439 60442 60450 60458 60460 60462 60478 60488 60491 60497 60498 60504 60505 60510 60514 60519 60522 60523 60528 60541 60542 60020 60615 60617 60619 60620 60621 60618]);
% 9 
struct('class','BC','name','xbc (?)','cells',[60355 60449 60379 60413 60430 60455 60493 60501 60517 60539 60547 60550]);
% 10 
struct('class','BC','name','bc6 (Syt2)','cells',[60489 60422 60356 60060 60423 60394 60425 60398 60401 60426 60407 60428 60443 60444 60476 60477 60483 60486 60496 60499 60512 60516 60526 60548 60549 60552 60554 60561 60611 60614 60467 60358 60370 60375 60381 60416 60419 60431 60441 60451 60464 60487 60530 60537 60036 60363 60409]);
% 11 
struct('class','BC','name','bc7 (Gus-GFP)','cells',[60361 60373 60376 60377 60051 60393 60396 60397 60412 60418 60429 60435 60437 60446 60454 60470 60480 60485 60492 60508 60509 60525 60529 60531 60546 60553 60562 60354 60016]);
% 12 
struct('class','BC','name','bc8/9 (?/Clm1)','cells',[60433 60482 60500 60578 60368 60402 60417 60438   60457 60461]);
% 13 
struct('class','BC','name','rbc','cells',[60463 60536 60357 60359 60365 60369 60372 60378 60382 60384 60392 60400 60456 60468 60471 60472 60474 60475 60479 60506 60515 60518 60520 60521 60544 60551 60555 60557 60558 60560 60563 60564 60565 60566 60567 60568 60569 60570 60571 60572 60573 60574 60575 60576 60577 60580 60581 60582 60583 60584 60585 60586 60587 60588 60589 60590 60591 60592 60593 60594 60595 60596 60597 60598 60599 60600 60601 60602 60603 60604 60605 60606 60607 60609 60610 60613 60017 60031 60427]);

];